// Code generated by protoc-gen-go.
// source: snowflake.proto
// DO NOT EDIT!

/*
Package snowflake is a generated protocol buffer package.

It is generated from these files:
	snowflake.proto

It has these top-level messages:
	SnowflakeRequest
	SnowflakeResponse
*/
package snowflake

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SnowflakeRequest struct {
	WorkerID int64 `protobuf:"varint,1,opt,name=workerID" json:"workerID,omitempty"`
}

func (m *SnowflakeRequest) Reset()         { *m = SnowflakeRequest{} }
func (m *SnowflakeRequest) String() string { return proto.CompactTextString(m) }
func (*SnowflakeRequest) ProtoMessage()    {}

type SnowflakeResponse struct {
	Guid int64 `protobuf:"varint,1,opt,name=guid" json:"guid,omitempty"`
}

func (m *SnowflakeResponse) Reset()         { *m = SnowflakeResponse{} }
func (m *SnowflakeResponse) String() string { return proto.CompactTextString(m) }
func (*SnowflakeResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*SnowflakeRequest)(nil), "snowflake.SnowflakeRequest")
	proto.RegisterType((*SnowflakeResponse)(nil), "snowflake.SnowflakeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for SnowflakeService service

type SnowflakeServiceClient interface {
	GetGUID(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeResponse, error)
}

type snowflakeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSnowflakeServiceClient(cc *grpc.ClientConn) SnowflakeServiceClient {
	return &snowflakeServiceClient{cc}
}

func (c *snowflakeServiceClient) GetGUID(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeResponse, error) {
	out := new(SnowflakeResponse)
	err := grpc.Invoke(ctx, "/snowflake.SnowflakeService/GetGUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SnowflakeService service

type SnowflakeServiceServer interface {
	GetGUID(context.Context, *SnowflakeRequest) (*SnowflakeResponse, error)
}

func RegisterSnowflakeServiceServer(s *grpc.Server, srv SnowflakeServiceServer) {
	s.RegisterService(&_SnowflakeService_serviceDesc, srv)
}

func _SnowflakeService_GetGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SnowflakeServiceServer).GetGUID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SnowflakeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snowflake.SnowflakeService",
	HandlerType: (*SnowflakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGUID",
			Handler:    _SnowflakeService_GetGUID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
